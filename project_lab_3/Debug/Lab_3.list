
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ec  080028ec  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080028ec  080028ec  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028ec  080028ec  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080028f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000024  08002918  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002918  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aa1  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb0  00000000  00000000  00029aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e39  00000000  00000000  0002ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfdd  00000000  00000000  00043859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082373  00000000  00000000  0004f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1ba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002878  00000000  00000000  000d1bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080028b0 	.word	0x080028b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080028b0 	.word	0x080028b0

0800014c <fsm_automatic>:
#include "input_reading.h"
#include "main.h"
#include "led_display.h"

void fsm_automatic()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status)
 8000150:	4ba8      	ldr	r3, [pc, #672]	; (80003f4 <fsm_automatic+0x2a8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 8140 	bhi.w	80003dc <fsm_automatic+0x290>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001a1 	.word	0x080001a1
 800016c:	08000231 	.word	0x08000231
 8000170:	080002c1 	.word	0x080002c1
 8000174:	0800034f 	.word	0x0800034f
    {
        case INIT: 
            status = RED_GREEN;          
 8000178:	4b9e      	ldr	r3, [pc, #632]	; (80003f4 <fsm_automatic+0x2a8>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
            setTimer1(timeGREEN*1000);
 800017e:	4b9e      	ldr	r3, [pc, #632]	; (80003f8 <fsm_automatic+0x2ac>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000186:	fb02 f303 	mul.w	r3, r2, r3
 800018a:	4618      	mov	r0, r3
 800018c:	f000 ffde 	bl	800114c <setTimer1>
            setTimer2(1000);
 8000190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000194:	f001 f810 	bl	80011b8 <setTimer2>
            is_button_pressed(0);
 8000198:	2000      	movs	r0, #0
 800019a:	f000 fb0d 	bl	80007b8 <is_button_pressed>
            break;  
 800019e:	e126      	b.n	80003ee <fsm_automatic+0x2a2>
        case RED_GREEN:
            ledSystem1(1);
 80001a0:	2001      	movs	r0, #1
 80001a2:	f000 fd99 	bl	8000cd8 <ledSystem1>
            ledSystem2(3);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 fdd8 	bl	8000d5c <ledSystem2>
            if(timer1_flag == 1)
 80001ac:	4b93      	ldr	r3, [pc, #588]	; (80003fc <fsm_automatic+0x2b0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d10f      	bne.n	80001d4 <fsm_automatic+0x88>
            {
                status = RED_AMBER;
 80001b4:	4b8f      	ldr	r3, [pc, #572]	; (80003f4 <fsm_automatic+0x2a8>)
 80001b6:	2203      	movs	r2, #3
 80001b8:	601a      	str	r2, [r3, #0]
                setTimer1(timeYELLOW*1000);
 80001ba:	4b91      	ldr	r3, [pc, #580]	; (8000400 <fsm_automatic+0x2b4>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001c2:	fb02 f303 	mul.w	r3, r2, r3
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 ffc0 	bl	800114c <setTimer1>
                setTimer2(1000);
 80001cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d0:	f000 fff2 	bl	80011b8 <setTimer2>
            }
            if(timer2_flag == 1)
 80001d4:	4b8b      	ldr	r3, [pc, #556]	; (8000404 <fsm_automatic+0x2b8>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d11b      	bne.n	8000214 <fsm_automatic+0xc8>
            {
            	updateClockBuffer(timeRED--, timeGREEN--);
 80001dc:	4b8a      	ldr	r3, [pc, #552]	; (8000408 <fsm_automatic+0x2bc>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	1e5a      	subs	r2, r3, #1
 80001e2:	4989      	ldr	r1, [pc, #548]	; (8000408 <fsm_automatic+0x2bc>)
 80001e4:	600a      	str	r2, [r1, #0]
 80001e6:	4a84      	ldr	r2, [pc, #528]	; (80003f8 <fsm_automatic+0x2ac>)
 80001e8:	6812      	ldr	r2, [r2, #0]
 80001ea:	1e51      	subs	r1, r2, #1
 80001ec:	4882      	ldr	r0, [pc, #520]	; (80003f8 <fsm_automatic+0x2ac>)
 80001ee:	6001      	str	r1, [r0, #0]
 80001f0:	4611      	mov	r1, r2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fafa 	bl	80007ec <updateClockBuffer>
            	if(timeGREEN == 0)
 80001f8:	4b7f      	ldr	r3, [pc, #508]	; (80003f8 <fsm_automatic+0x2ac>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d105      	bne.n	800020c <fsm_automatic+0xc0>
            	{
            		timeGREEN = 3;
 8000200:	4b7d      	ldr	r3, [pc, #500]	; (80003f8 <fsm_automatic+0x2ac>)
 8000202:	2203      	movs	r2, #3
 8000204:	601a      	str	r2, [r3, #0]
            		timeRED = 2;
 8000206:	4b80      	ldr	r3, [pc, #512]	; (8000408 <fsm_automatic+0x2bc>)
 8000208:	2202      	movs	r2, #2
 800020a:	601a      	str	r2, [r3, #0]
            	}
            	setTimer2(1000);
 800020c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000210:	f000 ffd2 	bl	80011b8 <setTimer2>
            }
            if(is_button_pressed(0) == 1)
 8000214:	2000      	movs	r0, #0
 8000216:	f000 facf 	bl	80007b8 <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b01      	cmp	r3, #1
 800021e:	f040 80df 	bne.w	80003e0 <fsm_automatic+0x294>
            {
            	status = MAN_MODE1;
 8000222:	4b74      	ldr	r3, [pc, #464]	; (80003f4 <fsm_automatic+0x2a8>)
 8000224:	220b      	movs	r2, #11
 8000226:	601a      	str	r2, [r3, #0]
            	setTimer1(250);
 8000228:	20fa      	movs	r0, #250	; 0xfa
 800022a:	f000 ff8f 	bl	800114c <setTimer1>
            }
            break;
 800022e:	e0d7      	b.n	80003e0 <fsm_automatic+0x294>

        case RED_AMBER:
        	ledSystem1(1);
 8000230:	2001      	movs	r0, #1
 8000232:	f000 fd51 	bl	8000cd8 <ledSystem1>
        	ledSystem2(2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 fd90 	bl	8000d5c <ledSystem2>
            if(timer1_flag == 1)
 800023c:	4b6f      	ldr	r3, [pc, #444]	; (80003fc <fsm_automatic+0x2b0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d10f      	bne.n	8000264 <fsm_automatic+0x118>
            {
                status = GREEN_RED;
 8000244:	4b6b      	ldr	r3, [pc, #428]	; (80003f4 <fsm_automatic+0x2a8>)
 8000246:	2204      	movs	r2, #4
 8000248:	601a      	str	r2, [r3, #0]
                setTimer1(timeGREEN*1000);
 800024a:	4b6b      	ldr	r3, [pc, #428]	; (80003f8 <fsm_automatic+0x2ac>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000252:	fb02 f303 	mul.w	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 ff78 	bl	800114c <setTimer1>
                setTimer2(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f000 ffaa 	bl	80011b8 <setTimer2>
            }
            if(timer2_flag == 1)
 8000264:	4b67      	ldr	r3, [pc, #412]	; (8000404 <fsm_automatic+0x2b8>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d11b      	bne.n	80002a4 <fsm_automatic+0x158>
            {
            	updateClockBuffer(timeRED--, timeYELLOW--);
 800026c:	4b66      	ldr	r3, [pc, #408]	; (8000408 <fsm_automatic+0x2bc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1e5a      	subs	r2, r3, #1
 8000272:	4965      	ldr	r1, [pc, #404]	; (8000408 <fsm_automatic+0x2bc>)
 8000274:	600a      	str	r2, [r1, #0]
 8000276:	4a62      	ldr	r2, [pc, #392]	; (8000400 <fsm_automatic+0x2b4>)
 8000278:	6812      	ldr	r2, [r2, #0]
 800027a:	1e51      	subs	r1, r2, #1
 800027c:	4860      	ldr	r0, [pc, #384]	; (8000400 <fsm_automatic+0x2b4>)
 800027e:	6001      	str	r1, [r0, #0]
 8000280:	4611      	mov	r1, r2
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fab2 	bl	80007ec <updateClockBuffer>
            	if(timeYELLOW == 0)
 8000288:	4b5d      	ldr	r3, [pc, #372]	; (8000400 <fsm_automatic+0x2b4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d105      	bne.n	800029c <fsm_automatic+0x150>
            	{
            		timeYELLOW = 2;
 8000290:	4b5b      	ldr	r3, [pc, #364]	; (8000400 <fsm_automatic+0x2b4>)
 8000292:	2202      	movs	r2, #2
 8000294:	601a      	str	r2, [r3, #0]
            		timeRED = 5;
 8000296:	4b5c      	ldr	r3, [pc, #368]	; (8000408 <fsm_automatic+0x2bc>)
 8000298:	2205      	movs	r2, #5
 800029a:	601a      	str	r2, [r3, #0]
            	}
            	setTimer2(1000);
 800029c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a0:	f000 ff8a 	bl	80011b8 <setTimer2>
            }
            if(is_button_pressed(0) == 1)
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fa87 	bl	80007b8 <is_button_pressed>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	f040 8099 	bne.w	80003e4 <fsm_automatic+0x298>
            {
            	status = MAN_MODE1;
 80002b2:	4b50      	ldr	r3, [pc, #320]	; (80003f4 <fsm_automatic+0x2a8>)
 80002b4:	220b      	movs	r2, #11
 80002b6:	601a      	str	r2, [r3, #0]
            	setTimer1(250);
 80002b8:	20fa      	movs	r0, #250	; 0xfa
 80002ba:	f000 ff47 	bl	800114c <setTimer1>
            }
            break;
 80002be:	e091      	b.n	80003e4 <fsm_automatic+0x298>

        case GREEN_RED:
        	ledSystem1(3);
 80002c0:	2003      	movs	r0, #3
 80002c2:	f000 fd09 	bl	8000cd8 <ledSystem1>
        	ledSystem2(1);
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fd48 	bl	8000d5c <ledSystem2>
            if(timer1_flag == 1)
 80002cc:	4b4b      	ldr	r3, [pc, #300]	; (80003fc <fsm_automatic+0x2b0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d10f      	bne.n	80002f4 <fsm_automatic+0x1a8>
            {
                status = AMBER_RED;
 80002d4:	4b47      	ldr	r3, [pc, #284]	; (80003f4 <fsm_automatic+0x2a8>)
 80002d6:	2205      	movs	r2, #5
 80002d8:	601a      	str	r2, [r3, #0]
                setTimer1(timeYELLOW*1000);
 80002da:	4b49      	ldr	r3, [pc, #292]	; (8000400 <fsm_automatic+0x2b4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e2:	fb02 f303 	mul.w	r3, r2, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 ff30 	bl	800114c <setTimer1>
                setTimer2(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f000 ff62 	bl	80011b8 <setTimer2>
            }
            if(timer2_flag == 1)
 80002f4:	4b43      	ldr	r3, [pc, #268]	; (8000404 <fsm_automatic+0x2b8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d11b      	bne.n	8000334 <fsm_automatic+0x1e8>
            {
            	updateClockBuffer(timeGREEN--, timeRED--);
 80002fc:	4b3e      	ldr	r3, [pc, #248]	; (80003f8 <fsm_automatic+0x2ac>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1e5a      	subs	r2, r3, #1
 8000302:	493d      	ldr	r1, [pc, #244]	; (80003f8 <fsm_automatic+0x2ac>)
 8000304:	600a      	str	r2, [r1, #0]
 8000306:	4a40      	ldr	r2, [pc, #256]	; (8000408 <fsm_automatic+0x2bc>)
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	1e51      	subs	r1, r2, #1
 800030c:	483e      	ldr	r0, [pc, #248]	; (8000408 <fsm_automatic+0x2bc>)
 800030e:	6001      	str	r1, [r0, #0]
 8000310:	4611      	mov	r1, r2
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fa6a 	bl	80007ec <updateClockBuffer>
            	if(timeGREEN == 0)
 8000318:	4b37      	ldr	r3, [pc, #220]	; (80003f8 <fsm_automatic+0x2ac>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d105      	bne.n	800032c <fsm_automatic+0x1e0>
            	{
            		timeGREEN = 3;
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <fsm_automatic+0x2ac>)
 8000322:	2203      	movs	r2, #3
 8000324:	601a      	str	r2, [r3, #0]
            		timeRED = 2;
 8000326:	4b38      	ldr	r3, [pc, #224]	; (8000408 <fsm_automatic+0x2bc>)
 8000328:	2202      	movs	r2, #2
 800032a:	601a      	str	r2, [r3, #0]
            	}
            	setTimer2(1000);
 800032c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000330:	f000 ff42 	bl	80011b8 <setTimer2>
            }
            if(is_button_pressed(0) == 1)
 8000334:	2000      	movs	r0, #0
 8000336:	f000 fa3f 	bl	80007b8 <is_button_pressed>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d153      	bne.n	80003e8 <fsm_automatic+0x29c>
            {
            	status = MAN_MODE1;
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <fsm_automatic+0x2a8>)
 8000342:	220b      	movs	r2, #11
 8000344:	601a      	str	r2, [r3, #0]
            	setTimer1(250);
 8000346:	20fa      	movs	r0, #250	; 0xfa
 8000348:	f000 ff00 	bl	800114c <setTimer1>
            }
            break;
 800034c:	e04c      	b.n	80003e8 <fsm_automatic+0x29c>

        case AMBER_RED:
        	ledSystem1(2);
 800034e:	2002      	movs	r0, #2
 8000350:	f000 fcc2 	bl	8000cd8 <ledSystem1>
        	ledSystem2(1);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fd01 	bl	8000d5c <ledSystem2>
            if (timer1_flag == 1)
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <fsm_automatic+0x2b0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d10f      	bne.n	8000382 <fsm_automatic+0x236>
            {
                status = RED_GREEN;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <fsm_automatic+0x2a8>)
 8000364:	2202      	movs	r2, #2
 8000366:	601a      	str	r2, [r3, #0]
                setTimer1(timeGREEN*1000);
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <fsm_automatic+0x2ac>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000370:	fb02 f303 	mul.w	r3, r2, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fee9 	bl	800114c <setTimer1>
                setTimer2(1000);
 800037a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037e:	f000 ff1b 	bl	80011b8 <setTimer2>
            }
            if (timer2_flag == 1)
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <fsm_automatic+0x2b8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d11b      	bne.n	80003c2 <fsm_automatic+0x276>
            {
            	updateClockBuffer(timeYELLOW--, timeRED--);
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <fsm_automatic+0x2b4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	1e5a      	subs	r2, r3, #1
 8000390:	491b      	ldr	r1, [pc, #108]	; (8000400 <fsm_automatic+0x2b4>)
 8000392:	600a      	str	r2, [r1, #0]
 8000394:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <fsm_automatic+0x2bc>)
 8000396:	6812      	ldr	r2, [r2, #0]
 8000398:	1e51      	subs	r1, r2, #1
 800039a:	481b      	ldr	r0, [pc, #108]	; (8000408 <fsm_automatic+0x2bc>)
 800039c:	6001      	str	r1, [r0, #0]
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fa23 	bl	80007ec <updateClockBuffer>
            	if(timeYELLOW == 0)
 80003a6:	4b16      	ldr	r3, [pc, #88]	; (8000400 <fsm_automatic+0x2b4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d105      	bne.n	80003ba <fsm_automatic+0x26e>
            	{
            		timeYELLOW = 2;
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <fsm_automatic+0x2b4>)
 80003b0:	2202      	movs	r2, #2
 80003b2:	601a      	str	r2, [r3, #0]
            		timeRED = 5;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <fsm_automatic+0x2bc>)
 80003b6:	2205      	movs	r2, #5
 80003b8:	601a      	str	r2, [r3, #0]
            	}
            	setTimer2(1000);
 80003ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003be:	f000 fefb 	bl	80011b8 <setTimer2>
            }
            if(is_button_pressed(0) == 1)
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 f9f8 	bl	80007b8 <is_button_pressed>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d10e      	bne.n	80003ec <fsm_automatic+0x2a0>
            {
            	status = MAN_MODE1;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <fsm_automatic+0x2a8>)
 80003d0:	220b      	movs	r2, #11
 80003d2:	601a      	str	r2, [r3, #0]
            	setTimer1(250);
 80003d4:	20fa      	movs	r0, #250	; 0xfa
 80003d6:	f000 feb9 	bl	800114c <setTimer1>
            }
            break;
 80003da:	e007      	b.n	80003ec <fsm_automatic+0x2a0>

        default:
            break;         
 80003dc:	bf00      	nop
 80003de:	e006      	b.n	80003ee <fsm_automatic+0x2a2>
            break;
 80003e0:	bf00      	nop
 80003e2:	e004      	b.n	80003ee <fsm_automatic+0x2a2>
            break;
 80003e4:	bf00      	nop
 80003e6:	e002      	b.n	80003ee <fsm_automatic+0x2a2>
            break;
 80003e8:	bf00      	nop
 80003ea:	e000      	b.n	80003ee <fsm_automatic+0x2a2>
            break;
 80003ec:	bf00      	nop
    }
	
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000040 	.word	0x20000040
 80003f8:	20000008 	.word	0x20000008
 80003fc:	20000074 	.word	0x20000074
 8000400:	20000004 	.word	0x20000004
 8000404:	2000007c 	.word	0x2000007c
 8000408:	20000000 	.word	0x20000000

0800040c <fsm_manual>:
#include "input_reading.h"
#include "led_display.h"


void fsm_manual()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	switch(status)
 8000410:	4b9f      	ldr	r3, [pc, #636]	; (8000690 <fsm_manual+0x284>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3b0a      	subs	r3, #10
 8000416:	2b03      	cmp	r3, #3
 8000418:	f200 8137 	bhi.w	800068a <fsm_manual+0x27e>
 800041c:	a201      	add	r2, pc, #4	; (adr r2, 8000424 <fsm_manual+0x18>)
 800041e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000422:	bf00      	nop
 8000424:	08000435 	.word	0x08000435
 8000428:	0800047b 	.word	0x0800047b
 800042c:	0800052f 	.word	0x0800052f
 8000430:	080005db 	.word	0x080005db
	{
		// Mode AUTO run as fsm_automatic
		case AUTO:
			status = INIT;
 8000434:	4b96      	ldr	r3, [pc, #600]	; (8000690 <fsm_manual+0x284>)
 8000436:	2201      	movs	r2, #1
 8000438:	601a      	str	r2, [r3, #0]
			setTimer1(timeGREEN*1000);
 800043a:	4b96      	ldr	r3, [pc, #600]	; (8000694 <fsm_manual+0x288>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fe80 	bl	800114c <setTimer1>
			setTimer2(1000);
 800044c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000450:	f000 feb2 	bl	80011b8 <setTimer2>
			if(is_button_pressed(0) == 1)
 8000454:	2000      	movs	r0, #0
 8000456:	f000 f9af 	bl	80007b8 <is_button_pressed>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	f040 8113 	bne.w	8000688 <fsm_manual+0x27c>
			{
				status = MAN_MODE1;
 8000462:	4b8b      	ldr	r3, [pc, #556]	; (8000690 <fsm_manual+0x284>)
 8000464:	220b      	movs	r2, #11
 8000466:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046c:	f000 fe6e 	bl	800114c <setTimer1>
				setTimer2(1000);
 8000470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000474:	f000 fea0 	bl	80011b8 <setTimer2>
			}
			break;
 8000478:	e106      	b.n	8000688 <fsm_manual+0x27c>

		case MAN_MODE1:
			// Display only RED LED
			ledSystem1(1);
 800047a:	2001      	movs	r0, #1
 800047c:	f000 fc2c 	bl	8000cd8 <ledSystem1>
			ledSystem2(1);
 8000480:	2001      	movs	r0, #1
 8000482:	f000 fc6b 	bl	8000d5c <ledSystem2>
			if(timer1_flag == 1)
 8000486:	4b84      	ldr	r3, [pc, #528]	; (8000698 <fsm_manual+0x28c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d10b      	bne.n	80004a6 <fsm_manual+0x9a>
			{
				HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 800048e:	2104      	movs	r1, #4
 8000490:	4882      	ldr	r0, [pc, #520]	; (800069c <fsm_manual+0x290>)
 8000492:	f001 fa52 	bl	800193a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000496:	2120      	movs	r1, #32
 8000498:	4880      	ldr	r0, [pc, #512]	; (800069c <fsm_manual+0x290>)
 800049a:	f001 fa4e 	bl	800193a <HAL_GPIO_TogglePin>
				setTimer1(500);
 800049e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a2:	f000 fe53 	bl	800114c <setTimer1>
			}
			if(is_button_pressed(0) == 1)
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 f986 	bl	80007b8 <is_button_pressed>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d10a      	bne.n	80004c8 <fsm_manual+0xbc>
			{
				status = MAN_MODE2;
 80004b2:	4b77      	ldr	r3, [pc, #476]	; (8000690 <fsm_manual+0x284>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80004b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004bc:	f000 fe46 	bl	800114c <setTimer1>
				setTimer2(1000);
 80004c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c4:	f000 fe78 	bl	80011b8 <setTimer2>
			}
			if(is_button_pressed(1) == 1)
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 f975 	bl	80007b8 <is_button_pressed>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d111      	bne.n	80004f8 <fsm_manual+0xec>
			{
				tempRED++;
 80004d4:	4b72      	ldr	r3, [pc, #456]	; (80006a0 <fsm_manual+0x294>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a71      	ldr	r2, [pc, #452]	; (80006a0 <fsm_manual+0x294>)
 80004dc:	6013      	str	r3, [r2, #0]
				// Display current value of tempRED
				updateClockBuffer(1, tempRED);
 80004de:	4b70      	ldr	r3, [pc, #448]	; (80006a0 <fsm_manual+0x294>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 f981 	bl	80007ec <updateClockBuffer>
				if(tempRED > 99)
 80004ea:	4b6d      	ldr	r3, [pc, #436]	; (80006a0 <fsm_manual+0x294>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b63      	cmp	r3, #99	; 0x63
 80004f0:	dd02      	ble.n	80004f8 <fsm_manual+0xec>
				{
					tempRED = 0;
 80004f2:	4b6b      	ldr	r3, [pc, #428]	; (80006a0 <fsm_manual+0x294>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
				}
			}
			if(is_button_pressed(2) == 1)
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 f95d 	bl	80007b8 <is_button_pressed>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	d103      	bne.n	800050c <fsm_manual+0x100>
			{
				// Set timeRED = tempRED
				timeRED = tempRED;
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <fsm_manual+0x294>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a66      	ldr	r2, [pc, #408]	; (80006a4 <fsm_manual+0x298>)
 800050a:	6013      	str	r3, [r2, #0]
			}
			if(timer2_flag == 1)
 800050c:	4b66      	ldr	r3, [pc, #408]	; (80006a8 <fsm_manual+0x29c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d10c      	bne.n	800052e <fsm_manual+0x122>
			{
				// Count down setting time value;
				updateClockBuffer(1, timeRED--);
 8000514:	4b63      	ldr	r3, [pc, #396]	; (80006a4 <fsm_manual+0x298>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	4962      	ldr	r1, [pc, #392]	; (80006a4 <fsm_manual+0x298>)
 800051c:	600a      	str	r2, [r1, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	f000 f963 	bl	80007ec <updateClockBuffer>
				setTimer2(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f000 fe45 	bl	80011b8 <setTimer2>
			}


		case MAN_MODE2:
			// Display only YELLOW LED
			ledSystem1(2);
 800052e:	2002      	movs	r0, #2
 8000530:	f000 fbd2 	bl	8000cd8 <ledSystem1>
			ledSystem2(2);
 8000534:	2002      	movs	r0, #2
 8000536:	f000 fc11 	bl	8000d5c <ledSystem2>
			if (timer1_flag == 1)
 800053a:	4b57      	ldr	r3, [pc, #348]	; (8000698 <fsm_manual+0x28c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d107      	bne.n	8000552 <fsm_manual+0x146>
			{
				HAL_GPIO_TogglePin(YELLOW_GPIO_Port, YELLOW_Pin);
 8000542:	2108      	movs	r1, #8
 8000544:	4855      	ldr	r0, [pc, #340]	; (800069c <fsm_manual+0x290>)
 8000546:	f001 f9f8 	bl	800193a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	4853      	ldr	r0, [pc, #332]	; (800069c <fsm_manual+0x290>)
 800054e:	f001 f9f4 	bl	800193a <HAL_GPIO_TogglePin>
			}
			if (is_button_pressed(0) == 1)
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f930 	bl	80007b8 <is_button_pressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d10a      	bne.n	8000574 <fsm_manual+0x168>
			{
				status = MAN_MODE3;
 800055e:	4b4c      	ldr	r3, [pc, #304]	; (8000690 <fsm_manual+0x284>)
 8000560:	220d      	movs	r2, #13
 8000562:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f000 fdf0 	bl	800114c <setTimer1>
				setTimer2(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f000 fe22 	bl	80011b8 <setTimer2>
			}
			if (is_button_pressed(1) == 1)
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f91f 	bl	80007b8 <is_button_pressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d111      	bne.n	80005a4 <fsm_manual+0x198>
			{
				tempRED++;
 8000580:	4b47      	ldr	r3, [pc, #284]	; (80006a0 <fsm_manual+0x294>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a46      	ldr	r2, [pc, #280]	; (80006a0 <fsm_manual+0x294>)
 8000588:	6013      	str	r3, [r2, #0]
				// Display current value of tempRED
				updateClockBuffer(2, tempYELLOW);
 800058a:	4b48      	ldr	r3, [pc, #288]	; (80006ac <fsm_manual+0x2a0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	2002      	movs	r0, #2
 8000592:	f000 f92b 	bl	80007ec <updateClockBuffer>
				if (tempYELLOW > 99)
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <fsm_manual+0x2a0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b63      	cmp	r3, #99	; 0x63
 800059c:	dd02      	ble.n	80005a4 <fsm_manual+0x198>
				{
					tempYELLOW = 0;
 800059e:	4b43      	ldr	r3, [pc, #268]	; (80006ac <fsm_manual+0x2a0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
				}
			}
			if (is_button_pressed(2) == 1)
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 f907 	bl	80007b8 <is_button_pressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d103      	bne.n	80005b8 <fsm_manual+0x1ac>
			{
				// Set timeYELLOW = tempYELLOW
				timeYELLOW = tempYELLOW;
 80005b0:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <fsm_manual+0x2a0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a3e      	ldr	r2, [pc, #248]	; (80006b0 <fsm_manual+0x2a4>)
 80005b6:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1)
 80005b8:	4b3b      	ldr	r3, [pc, #236]	; (80006a8 <fsm_manual+0x29c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10c      	bne.n	80005da <fsm_manual+0x1ce>
			{
				// Count down setting time value;
				updateClockBuffer(2, timeYELLOW--);
 80005c0:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <fsm_manual+0x2a4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1e5a      	subs	r2, r3, #1
 80005c6:	493a      	ldr	r1, [pc, #232]	; (80006b0 <fsm_manual+0x2a4>)
 80005c8:	600a      	str	r2, [r1, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	2002      	movs	r0, #2
 80005ce:	f000 f90d 	bl	80007ec <updateClockBuffer>
				setTimer2(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f000 fdef 	bl	80011b8 <setTimer2>
			}

		case MAN_MODE3:
			ledSystem1(2);
 80005da:	2002      	movs	r0, #2
 80005dc:	f000 fb7c 	bl	8000cd8 <ledSystem1>
			ledSystem2(2);
 80005e0:	2002      	movs	r0, #2
 80005e2:	f000 fbbb 	bl	8000d5c <ledSystem2>
			if (timer1_flag == 1)
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <fsm_manual+0x28c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d107      	bne.n	80005fe <fsm_manual+0x1f2>
			{
				HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 80005ee:	2110      	movs	r1, #16
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <fsm_manual+0x290>)
 80005f2:	f001 f9a2 	bl	800193a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <fsm_manual+0x290>)
 80005fa:	f001 f99e 	bl	800193a <HAL_GPIO_TogglePin>
			}
			if (is_button_pressed(0) == 1)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f8da 	bl	80007b8 <is_button_pressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10a      	bne.n	8000620 <fsm_manual+0x214>
			{
				status = AUTO;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <fsm_manual+0x284>)
 800060c:	220a      	movs	r2, #10
 800060e:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f000 fd9a 	bl	800114c <setTimer1>
				setTimer2(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fdcc 	bl	80011b8 <setTimer2>
			}
			if (is_button_pressed(1) == 1)
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f8c9 	bl	80007b8 <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d111      	bne.n	8000650 <fsm_manual+0x244>
			{
				tempGREEN++;
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <fsm_manual+0x2a8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <fsm_manual+0x2a8>)
 8000634:	6013      	str	r3, [r2, #0]
				// Display current value of tempRED
				updateClockBuffer(2, tempGREEN);
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <fsm_manual+0x2a8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	2002      	movs	r0, #2
 800063e:	f000 f8d5 	bl	80007ec <updateClockBuffer>
				if (tempGREEN > 99)
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <fsm_manual+0x2a8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b63      	cmp	r3, #99	; 0x63
 8000648:	dd02      	ble.n	8000650 <fsm_manual+0x244>
				{
					tempGREEN = 0;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <fsm_manual+0x2a8>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
				}
			}
			if (is_button_pressed(2) == 1)
 8000650:	2002      	movs	r0, #2
 8000652:	f000 f8b1 	bl	80007b8 <is_button_pressed>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d103      	bne.n	8000664 <fsm_manual+0x258>
			{
				// Set timeGREEN = tempGREEN
				timeGREEN = tempGREEN;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <fsm_manual+0x2a8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <fsm_manual+0x288>)
 8000662:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1)
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <fsm_manual+0x29c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10e      	bne.n	800068a <fsm_manual+0x27e>
			{
				// Count down setting time value;
				updateClockBuffer(2, timeGREEN--);
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <fsm_manual+0x288>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <fsm_manual+0x288>)
 8000674:	600a      	str	r2, [r1, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	2002      	movs	r0, #2
 800067a:	f000 f8b7 	bl	80007ec <updateClockBuffer>
				setTimer2(1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000682:	f000 fd99 	bl	80011b8 <setTimer2>
			}
	}
}
 8000686:	e000      	b.n	800068a <fsm_manual+0x27e>
			break;
 8000688:	bf00      	nop
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000040 	.word	0x20000040
 8000694:	20000008 	.word	0x20000008
 8000698:	20000074 	.word	0x20000074
 800069c:	40010800 	.word	0x40010800
 80006a0:	2000000c 	.word	0x2000000c
 80006a4:	20000000 	.word	0x20000000
 80006a8:	2000007c 	.word	0x2000007c
 80006ac:	20000010 	.word	0x20000010
 80006b0:	20000004 	.word	0x20000004
 80006b4:	20000014 	.word	0x20000014

080006b8 <button_reading>:
// we define a flag for a button pressed more than 1 second .
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading ( void ) {
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i++) 
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e064      	b.n	800078e <button_reading+0xd6>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4935      	ldr	r1, [pc, #212]	; (80007a0 <button_reading+0xe8>)
 80006ca:	5c89      	ldrb	r1, [r1, r2]
 80006cc:	4a35      	ldr	r2, [pc, #212]	; (80007a4 <button_reading+0xec>)
 80006ce:	54d1      	strb	r1, [r2, r3]
		switch(i)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d01c      	beq.n	8000710 <button_reading+0x58>
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	dc25      	bgt.n	8000726 <button_reading+0x6e>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <button_reading+0x2c>
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d00b      	beq.n	80006fa <button_reading+0x42>
 80006e2:	e020      	b.n	8000726 <button_reading+0x6e>
		{
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin (BUTTON0_GPIO_Port , BUTTON0_Pin );
 80006e4:	79fc      	ldrb	r4, [r7, #7]
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	482f      	ldr	r0, [pc, #188]	; (80007a8 <button_reading+0xf0>)
 80006ec:	f001 f8f6 	bl	80018dc <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <button_reading+0xe8>)
 80006f6:	551a      	strb	r2, [r3, r4]
				break;
 80006f8:	e015      	b.n	8000726 <button_reading+0x6e>

			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin (BUTTON1_GPIO_Port , BUTTON1_Pin );
 80006fa:	79fc      	ldrb	r4, [r7, #7]
 80006fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000700:	4829      	ldr	r0, [pc, #164]	; (80007a8 <button_reading+0xf0>)
 8000702:	f001 f8eb 	bl	80018dc <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <button_reading+0xe8>)
 800070c:	551a      	strb	r2, [r3, r4]
				break;
 800070e:	e00a      	b.n	8000726 <button_reading+0x6e>

			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin (BUTTON2_GPIO_Port , BUTTON2_Pin );
 8000710:	79fc      	ldrb	r4, [r7, #7]
 8000712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000716:	4824      	ldr	r0, [pc, #144]	; (80007a8 <button_reading+0xf0>)
 8000718:	f001 f8e0 	bl	80018dc <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <button_reading+0xe8>)
 8000722:	551a      	strb	r2, [r3, r4]
				break;
 8000724:	bf00      	nop

		}
			if( debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <button_reading+0xe8>)
 800072a:	5cd2      	ldrb	r2, [r2, r3]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	491d      	ldr	r1, [pc, #116]	; (80007a4 <button_reading+0xec>)
 8000730:	5ccb      	ldrb	r3, [r1, r3]
 8000732:	429a      	cmp	r2, r3
 8000734:	d105      	bne.n	8000742 <button_reading+0x8a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4919      	ldr	r1, [pc, #100]	; (80007a0 <button_reading+0xe8>)
 800073c:	5c89      	ldrb	r1, [r1, r2]
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <button_reading+0xf4>)
 8000740:	54d1      	strb	r1, [r2, r3]
			if( buttonBuffer[i] == BUTTON_IS_PRESSED )
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <button_reading+0xf4>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d114      	bne.n	8000776 <button_reading+0xbe>
			{
				// if a button is pressed , we start counting
				if( counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING )
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <button_reading+0xf8>)
 8000750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000754:	2b63      	cmp	r3, #99	; 0x63
 8000756:	d809      	bhi.n	800076c <button_reading+0xb4>
				{
					counterForButtonPress1s [i]++;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <button_reading+0xf8>)
 800075c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000760:	3201      	adds	r2, #1
 8000762:	b291      	uxth	r1, r2
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <button_reading+0xf8>)
 8000766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800076a:	e00d      	b.n	8000788 <button_reading+0xd0>
				}
				else
				{
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <button_reading+0xfc>)
 8000770:	2101      	movs	r1, #1
 8000772:	54d1      	strb	r1, [r2, r3]
 8000774:	e008      	b.n	8000788 <button_reading+0xd0>
					// todo
				}
			}
			else
			{
				counterForButtonPress1s[i] = 0;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <button_reading+0xf8>)
 800077a:	2100      	movs	r1, #0
 800077c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <button_reading+0xfc>)
 8000784:	2100      	movs	r1, #0
 8000786:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i++) 
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3301      	adds	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d997      	bls.n	80006c4 <button_reading+0xc>
			}
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000048 	.word	0x20000048
 80007a4:	2000004c 	.word	0x2000004c
 80007a8:	40010800 	.word	0x40010800
 80007ac:	20000044 	.word	0x20000044
 80007b0:	20000054 	.word	0x20000054
 80007b4:	20000050 	.word	0x20000050

080007b8 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index)
	{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
		if( index >= N0_OF_BUTTONS )
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d901      	bls.n	80007cc <is_button_pressed+0x14>
			return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e007      	b.n	80007dc <is_button_pressed+0x24>
		return (buttonBuffer[index] == BUTTON_IS_PRESSED) ;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <is_button_pressed+0x30>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf0c      	ite	eq
 80007d6:	2301      	moveq	r3, #1
 80007d8:	2300      	movne	r3, #0
 80007da:	b2db      	uxtb	r3, r3
	}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000044 	.word	0x20000044

080007ec <updateClockBuffer>:
#include "fsm_automatic.h"

int led_buffer[4] = {0, 0, 0, 0};

void updateClockBuffer(int sys1, int sys2)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]

    if (sys2 <= 9)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b09      	cmp	r3, #9
 80007fa:	dc06      	bgt.n	800080a <updateClockBuffer+0x1e>
    {
        led_buffer[3] = sys2;
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <updateClockBuffer+0x98>)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	60d3      	str	r3, [r2, #12]
        led_buffer[2] = 0;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <updateClockBuffer+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	e016      	b.n	8000838 <updateClockBuffer+0x4c>
    }
    else
    {
        led_buffer[3] = sys2 % 10;
 800080a:	6839      	ldr	r1, [r7, #0]
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <updateClockBuffer+0x9c>)
 800080e:	fb83 2301 	smull	r2, r3, r3, r1
 8000812:	109a      	asrs	r2, r3, #2
 8000814:	17cb      	asrs	r3, r1, #31
 8000816:	1ad2      	subs	r2, r2, r3
 8000818:	4613      	mov	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4413      	add	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	1aca      	subs	r2, r1, r3
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <updateClockBuffer+0x98>)
 8000824:	60da      	str	r2, [r3, #12]
        led_buffer[2] = sys2 / 10;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <updateClockBuffer+0x9c>)
 800082a:	fb82 1203 	smull	r1, r2, r2, r3
 800082e:	1092      	asrs	r2, r2, #2
 8000830:	17db      	asrs	r3, r3, #31
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <updateClockBuffer+0x98>)
 8000836:	6093      	str	r3, [r2, #8]
    }
    if (sys1 <= 9)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b09      	cmp	r3, #9
 800083c:	dc06      	bgt.n	800084c <updateClockBuffer+0x60>
    {
        led_buffer[1] = sys1;
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <updateClockBuffer+0x98>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6053      	str	r3, [r2, #4]
        led_buffer[0] = 0;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <updateClockBuffer+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    else
    {
        led_buffer[1] = sys1 % 10;
        led_buffer[0] = sys1 / 10;
    }
}
 800084a:	e016      	b.n	800087a <updateClockBuffer+0x8e>
        led_buffer[1] = sys1 % 10;
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <updateClockBuffer+0x9c>)
 8000850:	fb83 2301 	smull	r2, r3, r3, r1
 8000854:	109a      	asrs	r2, r3, #2
 8000856:	17cb      	asrs	r3, r1, #31
 8000858:	1ad2      	subs	r2, r2, r3
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	1aca      	subs	r2, r1, r3
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <updateClockBuffer+0x98>)
 8000866:	605a      	str	r2, [r3, #4]
        led_buffer[0] = sys1 / 10;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a07      	ldr	r2, [pc, #28]	; (8000888 <updateClockBuffer+0x9c>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1092      	asrs	r2, r2, #2
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a03      	ldr	r2, [pc, #12]	; (8000884 <updateClockBuffer+0x98>)
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	2000005c 	.word	0x2000005c
 8000888:	66666667 	.word	0x66666667

0800088c <update7SEG>:
void update7SEG(int index)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	f200 8084 	bhi.w	80009a4 <update7SEG+0x118>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <update7SEG+0x18>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008b5 	.word	0x080008b5
 80008a8:	080008f1 	.word	0x080008f1
 80008ac:	0800092d 	.word	0x0800092d
 80008b0:	08000969 	.word	0x08000969
    switch (index)
    {
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ba:	483d      	ldr	r0, [pc, #244]	; (80009b0 <update7SEG+0x124>)
 80008bc:	f001 f825 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c6:	483a      	ldr	r0, [pc, #232]	; (80009b0 <update7SEG+0x124>)
 80008c8:	f001 f81f 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d2:	4837      	ldr	r0, [pc, #220]	; (80009b0 <update7SEG+0x124>)
 80008d4:	f001 f819 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008de:	4834      	ldr	r0, [pc, #208]	; (80009b0 <update7SEG+0x124>)
 80008e0:	f001 f813 	bl	800190a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <update7SEG+0x128>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f865 	bl	80009b8 <display7SEG>
			break;
 80008ee:	e05a      	b.n	80009a6 <update7SEG+0x11a>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f6:	482e      	ldr	r0, [pc, #184]	; (80009b0 <update7SEG+0x124>)
 80008f8:	f001 f807 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <update7SEG+0x124>)
 8000904:	f001 f801 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	4828      	ldr	r0, [pc, #160]	; (80009b0 <update7SEG+0x124>)
 8000910:	f000 fffb 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	4825      	ldr	r0, [pc, #148]	; (80009b0 <update7SEG+0x124>)
 800091c:	f000 fff5 	bl	800190a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <update7SEG+0x128>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f847 	bl	80009b8 <display7SEG>
			break;
 800092a:	e03c      	b.n	80009a6 <update7SEG+0x11a>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000932:	481f      	ldr	r0, [pc, #124]	; (80009b0 <update7SEG+0x124>)
 8000934:	f000 ffe9 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <update7SEG+0x124>)
 8000940:	f000 ffe3 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094a:	4819      	ldr	r0, [pc, #100]	; (80009b0 <update7SEG+0x124>)
 800094c:	f000 ffdd 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000956:	4816      	ldr	r0, [pc, #88]	; (80009b0 <update7SEG+0x124>)
 8000958:	f000 ffd7 	bl	800190a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <update7SEG+0x128>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f829 	bl	80009b8 <display7SEG>
			break;
 8000966:	e01e      	b.n	80009a6 <update7SEG+0x11a>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <update7SEG+0x124>)
 8000970:	f000 ffcb 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <update7SEG+0x124>)
 800097c:	f000 ffc5 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <update7SEG+0x124>)
 8000988:	f000 ffbf 	bl	800190a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <update7SEG+0x124>)
 8000994:	f000 ffb9 	bl	800190a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <update7SEG+0x128>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f80b 	bl	80009b8 <display7SEG>
			break;
 80009a2:	e000      	b.n	80009a6 <update7SEG+0x11a>
		default:
			break;
 80009a4:	bf00      	nop
    }
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010800 	.word	0x40010800
 80009b4:	2000005c 	.word	0x2000005c

080009b8 <display7SEG>:

void display7SEG(int num)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

    if (num == 1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d123      	bne.n	8000a0e <display7SEG+0x56>
    {
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2101      	movs	r1, #1
 80009ca:	48c2      	ldr	r0, [pc, #776]	; (8000cd4 <display7SEG+0x31c>)
 80009cc:	f000 ff9d 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2102      	movs	r1, #2
 80009d4:	48bf      	ldr	r0, [pc, #764]	; (8000cd4 <display7SEG+0x31c>)
 80009d6:	f000 ff98 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2104      	movs	r1, #4
 80009de:	48bd      	ldr	r0, [pc, #756]	; (8000cd4 <display7SEG+0x31c>)
 80009e0:	f000 ff93 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2108      	movs	r1, #8
 80009e8:	48ba      	ldr	r0, [pc, #744]	; (8000cd4 <display7SEG+0x31c>)
 80009ea:	f000 ff8e 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	48b8      	ldr	r0, [pc, #736]	; (8000cd4 <display7SEG+0x31c>)
 80009f4:	f000 ff89 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	48b5      	ldr	r0, [pc, #724]	; (8000cd4 <display7SEG+0x31c>)
 80009fe:	f000 ff84 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	48b3      	ldr	r0, [pc, #716]	; (8000cd4 <display7SEG+0x31c>)
 8000a08:	f000 ff7f 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
    }
}
 8000a0c:	e15d      	b.n	8000cca <display7SEG+0x312>
    else if (num == 2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d123      	bne.n	8000a5c <display7SEG+0xa4>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2101      	movs	r1, #1
 8000a18:	48ae      	ldr	r0, [pc, #696]	; (8000cd4 <display7SEG+0x31c>)
 8000a1a:	f000 ff76 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2102      	movs	r1, #2
 8000a22:	48ac      	ldr	r0, [pc, #688]	; (8000cd4 <display7SEG+0x31c>)
 8000a24:	f000 ff71 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	48a9      	ldr	r0, [pc, #676]	; (8000cd4 <display7SEG+0x31c>)
 8000a2e:	f000 ff6c 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	48a7      	ldr	r0, [pc, #668]	; (8000cd4 <display7SEG+0x31c>)
 8000a38:	f000 ff67 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2110      	movs	r1, #16
 8000a40:	48a4      	ldr	r0, [pc, #656]	; (8000cd4 <display7SEG+0x31c>)
 8000a42:	f000 ff62 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2120      	movs	r1, #32
 8000a4a:	48a2      	ldr	r0, [pc, #648]	; (8000cd4 <display7SEG+0x31c>)
 8000a4c:	f000 ff5d 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	489f      	ldr	r0, [pc, #636]	; (8000cd4 <display7SEG+0x31c>)
 8000a56:	f000 ff58 	bl	800190a <HAL_GPIO_WritePin>
}
 8000a5a:	e136      	b.n	8000cca <display7SEG+0x312>
    else if (num == 3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d123      	bne.n	8000aaa <display7SEG+0xf2>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	489b      	ldr	r0, [pc, #620]	; (8000cd4 <display7SEG+0x31c>)
 8000a68:	f000 ff4f 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4898      	ldr	r0, [pc, #608]	; (8000cd4 <display7SEG+0x31c>)
 8000a72:	f000 ff4a 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4896      	ldr	r0, [pc, #600]	; (8000cd4 <display7SEG+0x31c>)
 8000a7c:	f000 ff45 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	4893      	ldr	r0, [pc, #588]	; (8000cd4 <display7SEG+0x31c>)
 8000a86:	f000 ff40 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	4891      	ldr	r0, [pc, #580]	; (8000cd4 <display7SEG+0x31c>)
 8000a90:	f000 ff3b 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2120      	movs	r1, #32
 8000a98:	488e      	ldr	r0, [pc, #568]	; (8000cd4 <display7SEG+0x31c>)
 8000a9a:	f000 ff36 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	488c      	ldr	r0, [pc, #560]	; (8000cd4 <display7SEG+0x31c>)
 8000aa4:	f000 ff31 	bl	800190a <HAL_GPIO_WritePin>
}
 8000aa8:	e10f      	b.n	8000cca <display7SEG+0x312>
    else if (num == 4)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d123      	bne.n	8000af8 <display7SEG+0x140>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4887      	ldr	r0, [pc, #540]	; (8000cd4 <display7SEG+0x31c>)
 8000ab6:	f000 ff28 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	4885      	ldr	r0, [pc, #532]	; (8000cd4 <display7SEG+0x31c>)
 8000ac0:	f000 ff23 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4882      	ldr	r0, [pc, #520]	; (8000cd4 <display7SEG+0x31c>)
 8000aca:	f000 ff1e 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4880      	ldr	r0, [pc, #512]	; (8000cd4 <display7SEG+0x31c>)
 8000ad4:	f000 ff19 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	487d      	ldr	r0, [pc, #500]	; (8000cd4 <display7SEG+0x31c>)
 8000ade:	f000 ff14 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	487b      	ldr	r0, [pc, #492]	; (8000cd4 <display7SEG+0x31c>)
 8000ae8:	f000 ff0f 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4878      	ldr	r0, [pc, #480]	; (8000cd4 <display7SEG+0x31c>)
 8000af2:	f000 ff0a 	bl	800190a <HAL_GPIO_WritePin>
}
 8000af6:	e0e8      	b.n	8000cca <display7SEG+0x312>
    else if (num == 5)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	d123      	bne.n	8000b46 <display7SEG+0x18e>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	4874      	ldr	r0, [pc, #464]	; (8000cd4 <display7SEG+0x31c>)
 8000b04:	f000 ff01 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4871      	ldr	r0, [pc, #452]	; (8000cd4 <display7SEG+0x31c>)
 8000b0e:	f000 fefc 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2104      	movs	r1, #4
 8000b16:	486f      	ldr	r0, [pc, #444]	; (8000cd4 <display7SEG+0x31c>)
 8000b18:	f000 fef7 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2108      	movs	r1, #8
 8000b20:	486c      	ldr	r0, [pc, #432]	; (8000cd4 <display7SEG+0x31c>)
 8000b22:	f000 fef2 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	486a      	ldr	r0, [pc, #424]	; (8000cd4 <display7SEG+0x31c>)
 8000b2c:	f000 feed 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2120      	movs	r1, #32
 8000b34:	4867      	ldr	r0, [pc, #412]	; (8000cd4 <display7SEG+0x31c>)
 8000b36:	f000 fee8 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	4865      	ldr	r0, [pc, #404]	; (8000cd4 <display7SEG+0x31c>)
 8000b40:	f000 fee3 	bl	800190a <HAL_GPIO_WritePin>
}
 8000b44:	e0c1      	b.n	8000cca <display7SEG+0x312>
    else if (num == 6)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d123      	bne.n	8000b94 <display7SEG+0x1dc>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4860      	ldr	r0, [pc, #384]	; (8000cd4 <display7SEG+0x31c>)
 8000b52:	f000 feda 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2102      	movs	r1, #2
 8000b5a:	485e      	ldr	r0, [pc, #376]	; (8000cd4 <display7SEG+0x31c>)
 8000b5c:	f000 fed5 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	485b      	ldr	r0, [pc, #364]	; (8000cd4 <display7SEG+0x31c>)
 8000b66:	f000 fed0 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4859      	ldr	r0, [pc, #356]	; (8000cd4 <display7SEG+0x31c>)
 8000b70:	f000 fecb 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	4856      	ldr	r0, [pc, #344]	; (8000cd4 <display7SEG+0x31c>)
 8000b7a:	f000 fec6 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	4854      	ldr	r0, [pc, #336]	; (8000cd4 <display7SEG+0x31c>)
 8000b84:	f000 fec1 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	4851      	ldr	r0, [pc, #324]	; (8000cd4 <display7SEG+0x31c>)
 8000b8e:	f000 febc 	bl	800190a <HAL_GPIO_WritePin>
}
 8000b92:	e09a      	b.n	8000cca <display7SEG+0x312>
    else if (num == 7)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d123      	bne.n	8000be2 <display7SEG+0x22a>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	484d      	ldr	r0, [pc, #308]	; (8000cd4 <display7SEG+0x31c>)
 8000ba0:	f000 feb3 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	484a      	ldr	r0, [pc, #296]	; (8000cd4 <display7SEG+0x31c>)
 8000baa:	f000 feae 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4848      	ldr	r0, [pc, #288]	; (8000cd4 <display7SEG+0x31c>)
 8000bb4:	f000 fea9 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4845      	ldr	r0, [pc, #276]	; (8000cd4 <display7SEG+0x31c>)
 8000bbe:	f000 fea4 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4843      	ldr	r0, [pc, #268]	; (8000cd4 <display7SEG+0x31c>)
 8000bc8:	f000 fe9f 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2120      	movs	r1, #32
 8000bd0:	4840      	ldr	r0, [pc, #256]	; (8000cd4 <display7SEG+0x31c>)
 8000bd2:	f000 fe9a 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	483e      	ldr	r0, [pc, #248]	; (8000cd4 <display7SEG+0x31c>)
 8000bdc:	f000 fe95 	bl	800190a <HAL_GPIO_WritePin>
}
 8000be0:	e073      	b.n	8000cca <display7SEG+0x312>
    else if (num == 8)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d123      	bne.n	8000c30 <display7SEG+0x278>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	4839      	ldr	r0, [pc, #228]	; (8000cd4 <display7SEG+0x31c>)
 8000bee:	f000 fe8c 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4837      	ldr	r0, [pc, #220]	; (8000cd4 <display7SEG+0x31c>)
 8000bf8:	f000 fe87 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <display7SEG+0x31c>)
 8000c02:	f000 fe82 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <display7SEG+0x31c>)
 8000c0c:	f000 fe7d 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2110      	movs	r1, #16
 8000c14:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <display7SEG+0x31c>)
 8000c16:	f000 fe78 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <display7SEG+0x31c>)
 8000c20:	f000 fe73 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	482a      	ldr	r0, [pc, #168]	; (8000cd4 <display7SEG+0x31c>)
 8000c2a:	f000 fe6e 	bl	800190a <HAL_GPIO_WritePin>
}
 8000c2e:	e04c      	b.n	8000cca <display7SEG+0x312>
    else if (num == 9)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	d123      	bne.n	8000c7e <display7SEG+0x2c6>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4826      	ldr	r0, [pc, #152]	; (8000cd4 <display7SEG+0x31c>)
 8000c3c:	f000 fe65 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2102      	movs	r1, #2
 8000c44:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <display7SEG+0x31c>)
 8000c46:	f000 fe60 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4821      	ldr	r0, [pc, #132]	; (8000cd4 <display7SEG+0x31c>)
 8000c50:	f000 fe5b 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <display7SEG+0x31c>)
 8000c5a:	f000 fe56 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	481c      	ldr	r0, [pc, #112]	; (8000cd4 <display7SEG+0x31c>)
 8000c64:	f000 fe51 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <display7SEG+0x31c>)
 8000c6e:	f000 fe4c 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <display7SEG+0x31c>)
 8000c78:	f000 fe47 	bl	800190a <HAL_GPIO_WritePin>
}
 8000c7c:	e025      	b.n	8000cca <display7SEG+0x312>
    else if (num == 0)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d122      	bne.n	8000cca <display7SEG+0x312>
        HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2101      	movs	r1, #1
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <display7SEG+0x31c>)
 8000c8a:	f000 fe3e 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2102      	movs	r1, #2
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <display7SEG+0x31c>)
 8000c94:	f000 fe39 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <display7SEG+0x31c>)
 8000c9e:	f000 fe34 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <display7SEG+0x31c>)
 8000ca8:	f000 fe2f 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <display7SEG+0x31c>)
 8000cb2:	f000 fe2a 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <display7SEG+0x31c>)
 8000cbc:	f000 fe25 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <display7SEG+0x31c>)
 8000cc6:	f000 fe20 	bl	800190a <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <ledSystem1>:
// RED ON = 1 ; YELLOW ON = 2 ; GREEN ON = 3
void ledSystem1(int num)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	if(num == 1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10f      	bne.n	8000d06 <ledSystem1+0x2e>
    {
		HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	481b      	ldr	r0, [pc, #108]	; (8000d58 <ledSystem1+0x80>)
 8000cec:	f000 fe0d 	bl	800190a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <ledSystem1+0x80>)
 8000cf6:	f000 fe08 	bl	800190a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <ledSystem1+0x80>)
 8000d00:	f000 fe03 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 
    }
}
 8000d04:	e024      	b.n	8000d50 <ledSystem1+0x78>
    else if(num == 2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d10f      	bne.n	8000d2c <ledSystem1+0x54>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2104      	movs	r1, #4
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <ledSystem1+0x80>)
 8000d12:	f000 fdfa 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2108      	movs	r1, #8
 8000d1a:	480f      	ldr	r0, [pc, #60]	; (8000d58 <ledSystem1+0x80>)
 8000d1c:	f000 fdf5 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <ledSystem1+0x80>)
 8000d26:	f000 fdf0 	bl	800190a <HAL_GPIO_WritePin>
}
 8000d2a:	e011      	b.n	8000d50 <ledSystem1+0x78>
    else if(num == 3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d10e      	bne.n	8000d50 <ledSystem1+0x78>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2104      	movs	r1, #4
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <ledSystem1+0x80>)
 8000d38:	f000 fde7 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <ledSystem1+0x80>)
 8000d42:	f000 fde2 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2110      	movs	r1, #16
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <ledSystem1+0x80>)
 8000d4c:	f000 fddd 	bl	800190a <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010800 	.word	0x40010800

08000d5c <ledSystem2>:

void ledSystem2(int num)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    if(num == 1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10f      	bne.n	8000d8a <ledSystem2+0x2e>
    {
        HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	481b      	ldr	r0, [pc, #108]	; (8000ddc <ledSystem2+0x80>)
 8000d70:	f000 fdcb 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <ledSystem2+0x80>)
 8000d7a:	f000 fdc6 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4816      	ldr	r0, [pc, #88]	; (8000ddc <ledSystem2+0x80>)
 8000d84:	f000 fdc1 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
    }
    
}
 8000d88:	e024      	b.n	8000dd4 <ledSystem2+0x78>
    else if(num == 2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d10f      	bne.n	8000db0 <ledSystem2+0x54>
        HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2120      	movs	r1, #32
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <ledSystem2+0x80>)
 8000d96:	f000 fdb8 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <ledSystem2+0x80>)
 8000da0:	f000 fdb3 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <ledSystem2+0x80>)
 8000daa:	f000 fdae 	bl	800190a <HAL_GPIO_WritePin>
}
 8000dae:	e011      	b.n	8000dd4 <ledSystem2+0x78>
    else if(num == 3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d10e      	bne.n	8000dd4 <ledSystem2+0x78>
        HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2120      	movs	r1, #32
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <ledSystem2+0x80>)
 8000dbc:	f000 fda5 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <ledSystem2+0x80>)
 8000dc6:	f000 fda0 	bl	800190a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <ledSystem2+0x80>)
 8000dd0:	f000 fd9b 	bl	800190a <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010800 	.word	0x40010800

08000de0 <scanLed>:
int index_led = 0;

void scanLed()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    // display time in LED 7 SEGMENT
    if (timer3_flag == 1)
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <scanLed+0x34>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d111      	bne.n	8000e10 <scanLed+0x30>
    {
        update7SEG(index_led++);
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <scanLed+0x38>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	4909      	ldr	r1, [pc, #36]	; (8000e18 <scanLed+0x38>)
 8000df4:	600a      	str	r2, [r1, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd48 	bl	800088c <update7SEG>
        if (index_led > 3)
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <scanLed+0x38>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	dd02      	ble.n	8000e0a <scanLed+0x2a>
            index_led = 0;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <scanLed+0x38>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
        setTimer3(250);
 8000e0a:	20fa      	movs	r0, #250	; 0xfa
 8000e0c:	f000 fa0a 	bl	8001224 <setTimer3>
    }
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000084 	.word	0x20000084
 8000e18:	2000006c 	.word	0x2000006c

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f000 fa72 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f814 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f000 f89a 	bl	8000f60 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e2c:	f000 f84c 	bl	8000ec8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer3(250);
 8000e30:	20fa      	movs	r0, #250	; 0xfa
 8000e32:	f000 f9f7 	bl	8001224 <setTimer3>
  status = INIT;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <main+0x30>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic();
 8000e3c:	f7ff f986 	bl	800014c <fsm_automatic>
	  fsm_manual();
 8000e40:	f7ff fae4 	bl	800040c <fsm_manual>
	  scanLed();
 8000e44:	f7ff ffcc 	bl	8000de0 <scanLed>
	  fsm_automatic();
 8000e48:	e7f8      	b.n	8000e3c <main+0x20>
 8000e4a:	bf00      	nop
 8000e4c:	20000040 	.word	0x20000040

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	2228      	movs	r2, #40	; 0x28
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fd1e 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e76:	2301      	movs	r3, #1
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fd70 	bl	800196c <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e92:	f000 f8c7 	bl	8001024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 ffdc 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eba:	f000 f8b3 	bl	8001024 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3740      	adds	r7, #64	; 0x40
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000eee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ef2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000efc:	2209      	movs	r2, #9
 8000efe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f0c:	4813      	ldr	r0, [pc, #76]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000f0e:	f001 f909 	bl	8002124 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f18:	f000 f884 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4619      	mov	r1, r3
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000f2a:	f001 fa52 	bl	80023d2 <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f34:	f000 f876 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_TIM2_Init+0x94>)
 8000f46:	f001 fc1d 	bl	8002784 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f50:	f000 f868 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000088 	.word	0x20000088

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_GPIO_Init+0xb8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <MX_GPIO_Init+0xb8>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <MX_GPIO_Init+0xb8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <MX_GPIO_Init+0xb8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_GPIO_Init+0xb8>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_GPIO_Init+0xb8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin|GREEN_Pin|RED1_Pin
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f647 01fc 	movw	r1, #30972	; 0x78fc
 8000faa:	481c      	ldr	r0, [pc, #112]	; (800101c <MX_GPIO_Init+0xbc>)
 8000fac:	f000 fcad 	bl	800190a <HAL_GPIO_WritePin>
                          |YELLOW1_Pin|GREEN1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	217f      	movs	r1, #127	; 0x7f
 8000fb4:	481a      	ldr	r0, [pc, #104]	; (8001020 <MX_GPIO_Init+0xc0>)
 8000fb6:	f000 fca8 	bl	800190a <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_Pin YELLOW_Pin GREEN_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin|GREEN_Pin|RED1_Pin
 8000fba:	f647 03fc 	movw	r3, #30972	; 0x78fc
 8000fbe:	60bb      	str	r3, [r7, #8]
                          |YELLOW1_Pin|GREEN1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <MX_GPIO_Init+0xbc>)
 8000fd4:	f000 fb08 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000fd8:	237f      	movs	r3, #127	; 0x7f
 8000fda:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_GPIO_Init+0xc0>)
 8000ff0:	f000 fafa 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000ff4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0xbc>)
 800100a:	f000 faed 	bl	80015e8 <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40010800 	.word	0x40010800
 8001020:	40010c00 	.word	0x40010c00

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_MspInit+0x5c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_MspInit+0x5c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_MspInit+0x5c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_MspInit+0x5c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_MspInit+0x5c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_MspInit+0x5c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_MspInit+0x60>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_MspInit+0x60>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000

08001094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d113      	bne.n	80010ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_TIM_Base_MspInit+0x44>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_TIM_Base_MspInit+0x44>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	201c      	movs	r0, #28
 80010c4:	f000 fa59 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c8:	201c      	movs	r0, #28
 80010ca:	f000 fa72 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <NMI_Handler+0x4>

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler+0x4>

080010ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001122:	f000 f937 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM2_IRQHandler+0x10>)
 8001132:	f001 f846 	bl	80021c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000088 	.word	0x20000088

08001140 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <setTimer1+0x2c>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	1092      	asrs	r2, r2, #2
 800115e:	17db      	asrs	r3, r3, #31
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a06      	ldr	r2, [pc, #24]	; (800117c <setTimer1+0x30>)
 8001164:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <setTimer1+0x34>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	66666667 	.word	0x66666667
 800117c:	20000070 	.word	0x20000070
 8001180:	20000074 	.word	0x20000074

08001184 <timerRun1>:
void timerRun1()
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <timerRun1+0x2c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	dd0b      	ble.n	80011a8 <timerRun1+0x24>
	{
		timer1_counter--;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <timerRun1+0x2c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3b01      	subs	r3, #1
 8001196:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <timerRun1+0x2c>)
 8001198:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <timerRun1+0x2c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dc02      	bgt.n	80011a8 <timerRun1+0x24>
		{
			timer1_flag = 1;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <timerRun1+0x30>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	20000070 	.word	0x20000070
 80011b4:	20000074 	.word	0x20000074

080011b8 <setTimer2>:

void setTimer2(int duration)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <setTimer2+0x2c>)
 80011c4:	fb82 1203 	smull	r1, r2, r2, r3
 80011c8:	1092      	asrs	r2, r2, #2
 80011ca:	17db      	asrs	r3, r3, #31
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <setTimer2+0x30>)
 80011d0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <setTimer2+0x34>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	66666667 	.word	0x66666667
 80011e8:	20000078 	.word	0x20000078
 80011ec:	2000007c 	.word	0x2000007c

080011f0 <timerRun2>:
void timerRun2()
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	if (timer2_counter > 0)
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <timerRun2+0x2c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd0b      	ble.n	8001214 <timerRun2+0x24>
	{
		timer2_counter--;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <timerRun2+0x2c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <timerRun2+0x2c>)
 8001204:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <timerRun2+0x2c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	dc02      	bgt.n	8001214 <timerRun2+0x24>
		{
			timer2_flag = 1;
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <timerRun2+0x30>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000078 	.word	0x20000078
 8001220:	2000007c 	.word	0x2000007c

08001224 <setTimer3>:

void setTimer3(int duration)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <setTimer3+0x2c>)
 8001230:	fb82 1203 	smull	r1, r2, r2, r3
 8001234:	1092      	asrs	r2, r2, #2
 8001236:	17db      	asrs	r3, r3, #31
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <setTimer3+0x30>)
 800123c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <setTimer3+0x34>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	66666667 	.word	0x66666667
 8001254:	20000080 	.word	0x20000080
 8001258:	20000074 	.word	0x20000074

0800125c <timerRun3>:
void timerRun3()
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	if (timer3_counter > 0)
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <timerRun3+0x2c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	dd0b      	ble.n	8001280 <timerRun3+0x24>
	{
		timer3_counter--;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <timerRun3+0x2c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <timerRun3+0x2c>)
 8001270:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <timerRun3+0x2c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc02      	bgt.n	8001280 <timerRun3+0x24>
		{
			timer3_flag = 1;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <timerRun3+0x30>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000080 	.word	0x20000080
 800128c:	20000084 	.word	0x20000084

08001290 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	 if(htim->Instance	==	TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a0:	d107      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
		button_reading();
 80012a2:	f7ff fa09 	bl	80006b8 <button_reading>
		timerRun1();
 80012a6:	f7ff ff6d 	bl	8001184 <timerRun1>
		timerRun2();
 80012aa:	f7ff ffa1 	bl	80011f0 <timerRun2>
		timerRun3();
 80012ae:	f7ff ffd5 	bl	800125c <timerRun3>
	 }
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff ff40 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012c2:	490c      	ldr	r1, [pc, #48]	; (80012f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012d8:	4c09      	ldr	r4, [pc, #36]	; (8001300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f001 fab7 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7ff fd97 	bl	8000e1c <main>
  bx lr
 80012ee:	4770      	bx	lr
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80012f8:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 80012fc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001300:	200000d4 	.word	0x200000d4

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x28>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f923 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fe84 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f93b 	bl	80015ce <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f903 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000018 	.word	0x20000018
 800138c:	20000020 	.word	0x20000020
 8001390:	2000001c 	.word	0x2000001c

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000020 	.word	0x20000020
 80013b4:	200000d0 	.word	0x200000d0

080013b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200000d0 	.word	0x200000d0

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4906      	ldr	r1, [pc, #24]	; (8001464 <__NVIC_EnableIRQ+0x34>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff90 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff2d 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff42 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff90 	bl	80014bc <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5f 	bl	8001468 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff35 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e148      	b.n	800188e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015fc:	2201      	movs	r2, #1
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8137 	bne.w	8001888 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4aa3      	ldr	r2, [pc, #652]	; (80018ac <HAL_GPIO_Init+0x2c4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d05e      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001624:	4aa1      	ldr	r2, [pc, #644]	; (80018ac <HAL_GPIO_Init+0x2c4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d875      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800162a:	4aa1      	ldr	r2, [pc, #644]	; (80018b0 <HAL_GPIO_Init+0x2c8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d058      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001630:	4a9f      	ldr	r2, [pc, #636]	; (80018b0 <HAL_GPIO_Init+0x2c8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d86f      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001636:	4a9f      	ldr	r2, [pc, #636]	; (80018b4 <HAL_GPIO_Init+0x2cc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d052      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 800163c:	4a9d      	ldr	r2, [pc, #628]	; (80018b4 <HAL_GPIO_Init+0x2cc>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d869      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001642:	4a9d      	ldr	r2, [pc, #628]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04c      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001648:	4a9b      	ldr	r2, [pc, #620]	; (80018b8 <HAL_GPIO_Init+0x2d0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d863      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800164e:	4a9b      	ldr	r2, [pc, #620]	; (80018bc <HAL_GPIO_Init+0x2d4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d046      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
 8001654:	4a99      	ldr	r2, [pc, #612]	; (80018bc <HAL_GPIO_Init+0x2d4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d85d      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 800165a:	2b12      	cmp	r3, #18
 800165c:	d82a      	bhi.n	80016b4 <HAL_GPIO_Init+0xcc>
 800165e:	2b12      	cmp	r3, #18
 8001660:	d859      	bhi.n	8001716 <HAL_GPIO_Init+0x12e>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_GPIO_Init+0x80>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016bd 	.word	0x080016bd
 8001670:	080016cf 	.word	0x080016cf
 8001674:	08001711 	.word	0x08001711
 8001678:	08001717 	.word	0x08001717
 800167c:	08001717 	.word	0x08001717
 8001680:	08001717 	.word	0x08001717
 8001684:	08001717 	.word	0x08001717
 8001688:	08001717 	.word	0x08001717
 800168c:	08001717 	.word	0x08001717
 8001690:	08001717 	.word	0x08001717
 8001694:	08001717 	.word	0x08001717
 8001698:	08001717 	.word	0x08001717
 800169c:	08001717 	.word	0x08001717
 80016a0:	08001717 	.word	0x08001717
 80016a4:	08001717 	.word	0x08001717
 80016a8:	08001717 	.word	0x08001717
 80016ac:	080016c5 	.word	0x080016c5
 80016b0:	080016d9 	.word	0x080016d9
 80016b4:	4a82      	ldr	r2, [pc, #520]	; (80018c0 <HAL_GPIO_Init+0x2d8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ba:	e02c      	b.n	8001716 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e029      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	3304      	adds	r3, #4
 80016ca:	623b      	str	r3, [r7, #32]
          break;
 80016cc:	e024      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	3308      	adds	r3, #8
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e01f      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	330c      	adds	r3, #12
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e01a      	b.n	8001718 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ea:	2304      	movs	r3, #4
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e013      	b.n	8001718 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	611a      	str	r2, [r3, #16]
          break;
 8001702:	e009      	b.n	8001718 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001704:	2308      	movs	r3, #8
 8001706:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	615a      	str	r2, [r3, #20]
          break;
 800170e:	e003      	b.n	8001718 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x130>
          break;
 8001716:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2bff      	cmp	r3, #255	; 0xff
 800171c:	d801      	bhi.n	8001722 <HAL_GPIO_Init+0x13a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_Init+0x13e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3304      	adds	r3, #4
 8001726:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d802      	bhi.n	8001734 <HAL_GPIO_Init+0x14c>
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x152>
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3b08      	subs	r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	210f      	movs	r1, #15
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8090 	beq.w	8001888 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001768:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <HAL_GPIO_Init+0x2dc>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_GPIO_Init+0x2dc>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_GPIO_Init+0x2dc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x2e0>)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_GPIO_Init+0x2e4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00d      	beq.n	80017c8 <HAL_GPIO_Init+0x1e0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2e8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <HAL_GPIO_Init+0x1dc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a47      	ldr	r2, [pc, #284]	; (80018d4 <HAL_GPIO_Init+0x2ec>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_GPIO_Init+0x1d8>
 80017bc:	2302      	movs	r3, #2
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1e2>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1e2>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1e2>
 80017c8:	2300      	movs	r3, #0
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017da:	493b      	ldr	r1, [pc, #236]	; (80018c8 <HAL_GPIO_Init+0x2e0>)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	4937      	ldr	r1, [pc, #220]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001802:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4933      	ldr	r1, [pc, #204]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800180c:	4013      	ands	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	492d      	ldr	r1, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4929      	ldr	r1, [pc, #164]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001834:	4013      	ands	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4923      	ldr	r1, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	491f      	ldr	r1, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800185c:	4013      	ands	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4919      	ldr	r1, [pc, #100]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4915      	ldr	r1, [pc, #84]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 8001884:	4013      	ands	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3301      	adds	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f aeaf 	bne.w	80015fc <HAL_GPIO_Init+0x14>
  }
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	372c      	adds	r7, #44	; 0x2c
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	10320000 	.word	0x10320000
 80018b0:	10310000 	.word	0x10310000
 80018b4:	10220000 	.word	0x10220000
 80018b8:	10210000 	.word	0x10210000
 80018bc:	10120000 	.word	0x10120000
 80018c0:	10110000 	.word	0x10110000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	807b      	strh	r3, [r7, #2]
 8001916:	4613      	mov	r3, r2
 8001918:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191a:	787b      	ldrb	r3, [r7, #1]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001920:	887a      	ldrh	r2, [r7, #2]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001926:	e003      	b.n	8001930 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	611a      	str	r2, [r3, #16]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800194c:	887a      	ldrh	r2, [r7, #2]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	041a      	lsls	r2, r3, #16
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43d9      	mvns	r1, r3
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	400b      	ands	r3, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e26c      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8087 	beq.w	8001a9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800198c:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b04      	cmp	r3, #4
 8001996:	d00c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001998:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d112      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
 80019a4:	4b8c      	ldr	r3, [pc, #560]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d06c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x12c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d168      	bne.n	8001a98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e246      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x76>
 80019d4:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a7f      	ldr	r2, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e02e      	b.n	8001a40 <HAL_RCC_OscConfig+0xd4>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7a      	ldr	r2, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b78      	ldr	r3, [pc, #480]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a77      	ldr	r2, [pc, #476]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0xd4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0xbc>
 8001a0e:	4b72      	ldr	r3, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a71      	ldr	r2, [pc, #452]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6e      	ldr	r2, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0xd4>
 8001a28:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6a      	ldr	r2, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a67      	ldr	r2, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fcb6 	bl	80013b8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fcb2 	bl	80013b8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1fa      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0xe4>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fca2 	bl	80013b8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fc9e 	bl	80013b8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1e6      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x10c>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d063      	beq.n	8001b6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x18c>
 8001abe:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x176>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1ba      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4939      	ldr	r1, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e03a      	b.n	8001b6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff fc57 	bl	80013b8 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fc53 	bl	80013b8 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e19b      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4927      	ldr	r1, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fc36 	bl	80013b8 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc32 	bl	80013b8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e17a      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03a      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d019      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fc16 	bl	80013b8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fc12 	bl	80013b8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e15a      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f000 fa9a 	bl	80020e8 <RCC_Delay>
 8001bb4:	e01c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fbfc 	bl	80013b8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc2:	e00f      	b.n	8001be4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fbf8 	bl	80013b8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d908      	bls.n	8001be4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e140      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	42420000 	.word	0x42420000
 8001be0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	4b9e      	ldr	r3, [pc, #632]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e9      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a6 	beq.w	8001d4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b94      	ldr	r3, [pc, #592]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a93      	ldr	r2, [pc, #588]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b8e      	ldr	r3, [pc, #568]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a8a      	ldr	r2, [pc, #552]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fbb9 	bl	80013b8 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7ff fbb5 	bl	80013b8 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0fd      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x312>
 8001c70:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a7a      	ldr	r2, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	e02d      	b.n	8001cda <HAL_RCC_OscConfig+0x36e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x334>
 8001c86:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a75      	ldr	r2, [pc, #468]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a72      	ldr	r2, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6213      	str	r3, [r2, #32]
 8001c9e:	e01c      	b.n	8001cda <HAL_RCC_OscConfig+0x36e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x356>
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a6c      	ldr	r2, [pc, #432]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a69      	ldr	r2, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	e00b      	b.n	8001cda <HAL_RCC_OscConfig+0x36e>
 8001cc2:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a66      	ldr	r2, [pc, #408]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a63      	ldr	r2, [pc, #396]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d015      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fb69 	bl	80013b8 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7ff fb65 	bl	80013b8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0ab      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ee      	beq.n	8001cea <HAL_RCC_OscConfig+0x37e>
 8001d0c:	e014      	b.n	8001d38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fb53 	bl	80013b8 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff fb4f 	bl	80013b8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e095      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ee      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d105      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8081 	beq.w	8001e56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d54:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d061      	beq.n	8001e24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d146      	bne.n	8001df6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_RCC_OscConfig+0x4fc>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb23 	bl	80013b8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fb1f 	bl	80013b8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e067      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d108      	bne.n	8001db0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	492d      	ldr	r1, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a19      	ldr	r1, [r3, #32]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	4927      	ldr	r1, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <HAL_RCC_OscConfig+0x4fc>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff faf3 	bl	80013b8 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff faef 	bl	80013b8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e037      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x46a>
 8001df4:	e02f      	b.n	8001e56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_RCC_OscConfig+0x4fc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fadc 	bl	80013b8 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff fad8 	bl	80013b8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e020      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x498>
 8001e22:	e018      	b.n	8001e56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e013      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	42420060 	.word	0x42420060

08001e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4965      	ldr	r1, [pc, #404]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e073      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4936      	ldr	r1, [pc, #216]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff fa2c 	bl	80013b8 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff fa28 	bl	80013b8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e053      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4922      	ldr	r1, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1cc>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1d0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f98a 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	080028c8 	.word	0x080028c8
 8002038:	20000018 	.word	0x20000018
 800203c:	2000001c 	.word	0x2000001c

08002040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x30>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x36>
 800206e:	e027      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002072:	613b      	str	r3, [r7, #16]
      break;
 8002074:	e027      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0c5b      	lsrs	r3, r3, #17
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	fb02 f203 	mul.w	r2, r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e004      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	613b      	str	r3, [r7, #16]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c2:	613b      	str	r3, [r7, #16]
      break;
 80020c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c6:	693b      	ldr	r3, [r7, #16]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	007a1200 	.word	0x007a1200
 80020dc:	080028d8 	.word	0x080028d8
 80020e0:	080028e8 	.word	0x080028e8
 80020e4:	003d0900 	.word	0x003d0900

080020e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <RCC_Delay+0x34>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <RCC_Delay+0x38>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0a5b      	lsrs	r3, r3, #9
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002104:	bf00      	nop
  }
  while (Delay --);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e5a      	subs	r2, r3, #1
 800210a:	60fa      	str	r2, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <RCC_Delay+0x1c>
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	20000018 	.word	0x20000018
 8002120:	10624dd3 	.word	0x10624dd3

08002124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e041      	b.n	80021ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe ffa2 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 fa20 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d122      	bne.n	800221e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d11b      	bne.n	800221e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0202 	mvn.w	r2, #2
 80021ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f9b4 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 800220a:	e005      	b.n	8002218 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f9a7 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9b6 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d122      	bne.n	8002272 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b04      	cmp	r3, #4
 8002238:	d11b      	bne.n	8002272 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0204 	mvn.w	r2, #4
 8002242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f98a 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 800225e:	e005      	b.n	800226c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f97d 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f98c 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b08      	cmp	r3, #8
 800227e:	d122      	bne.n	80022c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11b      	bne.n	80022c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0208 	mvn.w	r2, #8
 8002296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f960 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 80022b2:	e005      	b.n	80022c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f953 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f962 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d122      	bne.n	800231a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d11b      	bne.n	800231a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0210 	mvn.w	r2, #16
 80022ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2208      	movs	r2, #8
 80022f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f936 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002306:	e005      	b.n	8002314 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f929 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f938 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10e      	bne.n	8002346 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0201 	mvn.w	r2, #1
 800233e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe ffa5 	bl	8001290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d10e      	bne.n	8002372 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	2b80      	cmp	r3, #128	; 0x80
 8002360:	d107      	bne.n	8002372 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800236a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fa6a 	bl	8002846 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d10e      	bne.n	800239e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238a:	2b40      	cmp	r3, #64	; 0x40
 800238c:	d107      	bne.n	800239e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8fc 	bl	8002596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d10e      	bne.n	80023ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f06f 0220 	mvn.w	r2, #32
 80023c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fa35 	bl	8002834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_ConfigClockSource+0x1c>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e0b4      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x186>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002414:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d03e      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0xd4>
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	f200 8087 	bhi.w	800253e <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002434:	f000 8086 	beq.w	8002544 <HAL_TIM_ConfigClockSource+0x172>
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d87f      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 800243e:	2b70      	cmp	r3, #112	; 0x70
 8002440:	d01a      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0xa6>
 8002442:	2b70      	cmp	r3, #112	; 0x70
 8002444:	d87b      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 8002446:	2b60      	cmp	r3, #96	; 0x60
 8002448:	d050      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x11a>
 800244a:	2b60      	cmp	r3, #96	; 0x60
 800244c:	d877      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 800244e:	2b50      	cmp	r3, #80	; 0x50
 8002450:	d03c      	beq.n	80024cc <HAL_TIM_ConfigClockSource+0xfa>
 8002452:	2b50      	cmp	r3, #80	; 0x50
 8002454:	d873      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d058      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x13a>
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d86f      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 800245e:	2b30      	cmp	r3, #48	; 0x30
 8002460:	d064      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x15a>
 8002462:	2b30      	cmp	r3, #48	; 0x30
 8002464:	d86b      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 8002466:	2b20      	cmp	r3, #32
 8002468:	d060      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x15a>
 800246a:	2b20      	cmp	r3, #32
 800246c:	d867      	bhi.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d05c      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x15a>
 8002472:	2b10      	cmp	r3, #16
 8002474:	d05a      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x15a>
 8002476:	e062      	b.n	800253e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f000 f95d 	bl	8002746 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800249a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]
      break;
 80024a4:	e04f      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f000 f946 	bl	8002746 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024c8:	609a      	str	r2, [r3, #8]
      break;
 80024ca:	e03c      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	461a      	mov	r2, r3
 80024da:	f000 f8bd 	bl	8002658 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2150      	movs	r1, #80	; 0x50
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f914 	bl	8002712 <TIM_ITRx_SetConfig>
      break;
 80024ea:	e02c      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f000 f8db 	bl	80026b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2160      	movs	r1, #96	; 0x60
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f904 	bl	8002712 <TIM_ITRx_SetConfig>
      break;
 800250a:	e01c      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	f000 f89d 	bl	8002658 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2140      	movs	r1, #64	; 0x40
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f8f4 	bl	8002712 <TIM_ITRx_SetConfig>
      break;
 800252a:	e00c      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 f8eb 	bl	8002712 <TIM_ITRx_SetConfig>
      break;
 800253c:	e003      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      break;
 8002542:	e000      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002544:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a25      	ldr	r2, [pc, #148]	; (8002650 <TIM_Base_SetConfig+0xa8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d007      	beq.n	80025d0 <TIM_Base_SetConfig+0x28>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d003      	beq.n	80025d0 <TIM_Base_SetConfig+0x28>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <TIM_Base_SetConfig+0xac>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <TIM_Base_SetConfig+0xa8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <TIM_Base_SetConfig+0x52>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d003      	beq.n	80025fa <TIM_Base_SetConfig+0x52>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <TIM_Base_SetConfig+0xac>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d108      	bne.n	800260c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a07      	ldr	r2, [pc, #28]	; (8002650 <TIM_Base_SetConfig+0xa8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	615a      	str	r2, [r3, #20]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40000400 	.word	0x40000400

08002658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f023 030a 	bic.w	r3, r3, #10
 8002694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 0210 	bic.w	r2, r3, #16
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	031b      	lsls	r3, r3, #12
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	621a      	str	r2, [r3, #32]
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	f043 0307 	orr.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002760:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	021a      	lsls	r2, r3, #8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	609a      	str	r2, [r3, #8]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002798:	2302      	movs	r3, #2
 800279a:	e041      	b.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d004      	beq.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a10      	ldr	r2, [pc, #64]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10c      	bne.n	800280e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400

08002834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4d0c      	ldr	r5, [pc, #48]	; (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	f000 f822 	bl	80028b0 <_init>
 800286c:	2600      	movs	r6, #0
 800286e:	4d0a      	ldr	r5, [pc, #40]	; (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f855 3b04 	ldr.w	r3, [r5], #4
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	080028ec 	.word	0x080028ec
 8002894:	080028ec 	.word	0x080028ec
 8002898:	080028ec 	.word	0x080028ec
 800289c:	080028f0 	.word	0x080028f0

080028a0 <memset>:
 80028a0:	4603      	mov	r3, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
